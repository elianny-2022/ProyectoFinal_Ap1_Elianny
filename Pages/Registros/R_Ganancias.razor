@page "/Ganancia"
@page "/Ganancia/{GananciaId:int}"
@attribute [Authorize]
@inject GananciasBLL gananciasBLL
@inject LoteriasBLL loteriasBLL
@inject TipoJugadasBLL tipoJugadasBLL
@inject NotificationService notificationService
<EditForm Model="ganancia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div className="Container" class="card border-secondary mb-3" style="Margin: 15px;">
        <div class="container-sm row-cols-md-1">
            <div class="card shadow-lg">
                <div class="card-header">
                    <div class="card text-center">
                    <h1>Registro de Ganancia</h1>
                </div>
                </div>
                <div class="card-body">
                    <div class="row justify-content-between">
                        <div class="col-3">
                            <label>GananciaId</label>
                            <div class="input-group mb-3">
                                <input type="number" class="form-control" @bind-value="ganancia.GananciaId"
                                    aria-label="Recipient's username" aria-describedby="basic-addon2">
                                <button class="btn btn-outline-primary" type="button" @onclick="Buscar">
                                    <i class="oi oi-magnifying-glass" /> </button>
                            </div>
                        </div>
                        <div class="col-3">
                            <label>Fecha</label>
                            <input type="date" class="form-control" @bind-value="ganancia.Fecha"
                                aria-label="Recipient's username" aria-describedby="basic-addon2">
                        </div>
                    </div>
                </div>

                @* Ganancia DETALLE *@
                <fieldset class="border-success">
                    <div class="card-body">
                        <div class="row">
                            @* Loteria Id *@
                            <div class="col-2">
                                <label>Loterias</label>
                                <div class="btn-group me-2" role="group" aria-label="Second group">
                                    <select class="form-select" @bind="detalle.LoteriaId"
                                        aria-label=".form-select-lg example">
                                        <option value="0" hidden selected>Seleccione</option>
                                        @foreach (var loteria in LoteriasList)
                                        {
                                            <option value="@loteria.LoteriaId"> @loteria.NombreLoteria</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            @* Tipo de Jugada Id *@
                            <div class="col-2">
                                <label>Tipos de Jugadas</label>
                                <div class="btn-group me-2" role="group" aria-label="Second group">
                                    <select class="form-select" @bind="detalle.TipoId"
                                        aria-label=".form-select-lg example">
                                        <option value="0" hidden selected>Seleccione</option>
                                        @foreach (var tipo in TipoList)
                                        {
                                            <option value="@tipo.TipoId"> @tipo.NombreTipo</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            @*Monto*@
                            <div class="col-2">
                                <label>Monto</label>
                                <input type="number" class="form-control" @bind-value="detalle.Monto"
                                    aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                            </div>
                            @*Ganancias*@
                            <div class="col-2">
                                <label>Ganancias</label>
                                <input type="number" class="form-control" @bind-value="detalle.Ganancia"
                                    aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                            </div>
                            @*Boton de agregar detalle*@
                            <div class="col-2">
                                <button type="button" class="btn btn-outline-primary input-group-text mt-4"
                                    @onclick="AgregarDetalle">
                                    <span class="oi oi-plus">Agregar</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </fieldset>

                @* Tabla de detalles *@
                <hr />
                <table class="table table-bordered table-light">
                    <thead class="thead">
                        <tr class="table">
                            <th>LoteriaId</th>
                            <th>Nombre de Loteria</th>
                            <th>TipoJugadaId</th>
                            <th>Tipo de Jugadas</th>
                            <th>Monto</th>
                            <th>Ganancia</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ganancia.Detalle)
                        {
                            <tr>
                                <td>@item.LoteriaId</td>
                                <td>@gananciasBLL.GetNombreLoteria(item.LoteriaId)</td>
                                <td>@item.TipoId</td>
                                <td>@gananciasBLL.GetNombreTipo(item.TipoId)</td>
                                <td>@item.Monto</td>
                                <td>@item.Ganancia</td>
                                <td><span class="btn btn-sm btn-outline-primary oi oi-ban" href="#"
                                    @onclick="@(() => RemoverFila(item))"></span> </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <hr />
                @*Total Ganancia*@
                <div class="row  d-flex justify-content-end ">
                    <div class="col-2">
                        <label>Total Ganancia</label>
                        <span class="form-control"> @ganancia.Monto.ToString("N2") </span>
                    </div>
                </div>               
                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" />
                            Nuevo</button>
                        <button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" />
                            Guardar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i
                                class="oi oi-trash" /> Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int GananciaId { get; set; }
    public Ganancias ganancia { get; set; } = new Ganancias();
    public Loterias? loteria { get; set; } = new Loterias();
    public TipoJugadas? tipo { get; set; } = new TipoJugadas();
    public GananciasDetalle detalle { get; set; } = new GananciasDetalle();
    public List<Loterias> LoteriasList { get; set; } = new List<Loterias>();
    public List<TipoJugadas> TipoList { get; set; } = new List<TipoJugadas>();
    protected override void OnInitialized()
    {

        LoteriasList = loteriasBLL.LotoList();
        TipoList = tipoJugadasBLL.TipoList();
        ganancia.GananciaId = 0;
        ganancia.Fecha = DateTime.Now;
        ganancia.Ganancia = 0;
        ganancia.Monto = 0;

        if (GananciaId > 0)
        {
            ganancia.GananciaId = GananciaId;
            Buscar();
        }
    }
    void Buscar()
    {
        var encontrado = gananciasBLL.Buscar(ganancia.GananciaId);
        if (encontrado != null)
            ganancia = encontrado;


    }
    void Nuevo()
    {
        this.ganancia = new Ganancias();
        this.detalle = new GananciasDetalle();
        this.loteria = new Loterias();
        this.tipo = new TipoJugadas();

    }
    void Guardar()
    {

        if (GananaciaV() && gananciasBLL.Guardar(this.ganancia))
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se Guardo correctamente"
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No guardo"
            }
            );
        }

    }
    public void AgregarDetalle()
    {
        if (DetalleValido())
        {
            loteria = loteriasBLL.Buscar(detalle.LoteriaId);
            if (loteria == null)
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Loteria no se encontro"
                }
                );
                return;
            }
            tipo = tipoJugadasBLL.Buscar(detalle.TipoId);
            if (tipo == null)
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Tipo de jugada no se encontro"
                }
                );
                return;


            }
            this.ganancia.Detalle.Add(this.detalle);
            ganancia.Ganancia = ganancia.Detalle.Sum(det => det.Ganancia);
            ganancia.Ganancia += (detalle.Ganancia);
            ganancia.Monto = (detalle.Ganancia - detalle.Monto);
            this.detalle = new GananciasDetalle();
            this.loteria = new Loterias();
            this.tipo = new TipoJugadas();

        }

    }

    void Eliminar()
    {
        if (gananciasBLL.Eliminar(this.ganancia))
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se elimino correctamente"
            }
            );
            Nuevo();
        }
        else 
        {
             ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se elimino"
            }
            );
        }

    }
    void RemoverFila(GananciasDetalle item)
    {
        this.detalle = item;
        ganancia.Detalle.Remove(item);
        ganancia.Monto -= item.Monto;
    }
    private bool GananaciaV()
    {

        if (ganancia.Detalle.Count <= 0)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Los campos estan vacios"
            }
            );
            return false;
        }
        return true;
    }
    private bool DetalleValido()
    {
        string MensajeError = "";
        if (detalle.LoteriaId == 0)
        {
            MensajeError += "Debe seleccionar una loteria";
        }
        if (detalle.TipoId == 0)
        {
            MensajeError += "Debe seleccionar un tipo de jugada";
        }
        if (detalle.Monto <= 0)
        {
            MensajeError += "Debes ingresar monto mayor que 0";
        }
        if (MensajeError.Length > 0)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = MensajeError
            }
            );
            return false;

        }
        return true;
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}